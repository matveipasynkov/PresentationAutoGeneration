import os
import requests
import subprocess
import speech_recognition as sr
from pptx import Presentation
from pptx.dml.color import RGBColor
import re
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
PPTX_FILE = "auto_presentation.pptx"
OLLAMA_URL = "http://localhost:11434/api/generate"
MODEL_NAME = "llama3.2" # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏

def recognize_speech():
    """–†–∞—Å–ø–æ–∑–Ω–∞—ë—Ç —Ä–µ—á—å —á–µ—Ä–µ–∑ –º–∏–∫—Ä–æ—Ñ–æ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É."""
    r = sr.Recognizer()
    with sr.Microphone() as source:
        print("\nüé§ –ì–æ–≤–æ—Ä–∏—Ç–µ... (—Å–∫–∞–∂–∏—Ç–µ '—Å—Ç–æ–ø' –¥–ª—è –≤—ã—Ö–æ–¥–∞)")
        try:
            r.adjust_for_ambient_noise(source, duration=0.5)
            audio = r.listen(source, phrase_time_limit=15)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {e}")
            return ""
            
    try:
        text = r.recognize_google(audio, language="ru-RU")
        print(f"\nüîä –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text}")
        return text
    except sr.UnknownValueError:
        print("Google Speech Recognition –Ω–µ —Å–º–æ–≥–ª–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å")
        return ""
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
        return ""

def generate_slide_data(text):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –¥–∏–∑–∞–π–Ω –¥–ª—è —Å–ª–∞–π–¥–∞."""
    title_response = ""
    content_lines = []
    design_suggestions = "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–∏–∑–∞–π–Ω"
    
    if not text:
        print("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        return "", [], design_suggestions
    
    try:
        # --- 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ ---
        title_prompt = f"""<|begin_of_text|><|start_header_id|>user<|end_header_id|>
–í—ã–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ (3-5 —Å–ª–æ–≤):
"{text}". –û—Ç–≤–µ—Ç –¥–∞–π —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–π —Ç–µ–º–æ–π –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π.<|eot_id|><|start_header_id|>assistant<|end_header_id|>"""
        
        print("–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –∑–∞–≥–æ–ª–æ–≤–æ–∫...")
        response = requests.post(
            OLLAMA_URL,
            json={
                "model": MODEL_NAME,
                "prompt": title_prompt,
                "stream": False,
                "options": {"temperature": 0.3}
            },
            timeout=30
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        if response.status_code != 200:
            print(f"–û—à–∏–±–∫–∞ API (–∫–æ–¥ {response.status_code}): {response.text}")
            return "–û—à–∏–±–∫–∞ API", ["–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç API"], design_suggestions
            
        title_data = response.json()
        title_response = title_data.get("response", "").strip().replace('"', '')
        
        if not title_response:
            print("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç API")
            title_response = "–¢–µ–º–∞: " + text[:20]  # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—Å—Ç–∞
        
        print(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title_response}")
        
        # --- 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ---
        content_prompt = f"""<|begin_of_text|><|start_header_id|>user<|end_header_id|>
–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 3 –∫–ª—é—á–µ–≤—ã—Ö –ø—É–Ω–∫—Ç–∞ –¥–ª—è —Å–ª–∞–π–¥–∞ –Ω–∞ —Ç–µ–º—É "{title_response}"
–Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞: "{text}". –§–æ—Ä–º–∞—Ç: –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫, –Ω–∞—á–Ω–∏ –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Å "-" –∏–ª–∏ "*".
–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.<|eot_id|><|start_header_id|>assistant<|end_header_id|>"""
        
        print("–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –∫–æ–Ω—Ç–µ–Ω—Ç...")
        response = requests.post(
            OLLAMA_URL,
            json={
                "model": MODEL_NAME,
                "prompt": content_prompt,
                "stream": False,
                "options": {"temperature": 0.5}
            },
            timeout=30
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        if response.status_code != 200:
            print(f"–û—à–∏–±–∫–∞ API –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–∫–æ–¥ {response.status_code})")
            content_lines = [f"–ü—É–Ω–∫—Ç –æ {title_response}" for _ in range(3)]
        else:
            content_text = response.json().get("response", "")
            
            # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
            raw_lines = content_text.split("\n")
            content_lines = []
            
            for line in raw_lines:
                # –£–±–∏—Ä–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã —Å–ø–∏—Å–∫–∞ –∏ –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
                clean_line = re.sub(r'^[\s*‚Ä¢\-‚Äì‚Äî]+\s*', '', line).strip()
                if clean_line:  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    content_lines.append(clean_line)
            
            # –ï—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç, —Å–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã
            if not content_lines:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞ API")
                content_lines = [f"–ö–ª—é—á–µ–≤–æ–π –∞—Å–ø–µ–∫—Ç {i+1} —Ç–µ–º—ã '{title_response}'" for i in range(3)]
        
        # --- 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∑–∞–π–Ω–∞ ---
        design_prompt = f"""<|begin_of_text|><|start_header_id|>user<|end_header_id|>
–°–æ–∑–¥–∞–π —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω –¥–ª—è —Å–ª–∞–π–¥–∞ PowerPoint –Ω–∞ —Ç–µ–º—É "{title_response}".

–í–ê–ñ–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –î–ò–ó–ê–ô–ù–£:
1. –®–†–ò–§–¢–´: –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –º—è–≥–∫–∏–µ, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑: Montserrat (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ), Raleway, Open Sans Light, Roboto Light –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞. –î–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø–æ–¥–æ–π–¥–µ—Ç Open Sans –∏–ª–∏ Lato.

2. –¶–í–ï–¢–ê: –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —Å–ø–æ–∫–æ–π–Ω—ã–µ, –ø–∞—Å—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–Ω–∞. –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ:
   - –û—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç: –º–æ–ª–æ—á–Ω—ã–π, –±–µ–ª—ã–π, —Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π, –æ—á–µ–Ω—å —Å–≤–µ—Ç–ª—ã–π –±–µ–∂–µ–≤—ã–π (#F5F5F5, #FFFFF0, #FAFAFA)
   - –ê–∫—Ü–µ–Ω—Ç–Ω—ã–π —Ü–≤–µ—Ç: –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ã–π, –Ω–µ—è—Ä–∫–∏–π –æ—Ç—Ç–µ–Ω–æ–∫ (–ø—ã–ª—å–Ω–æ-—Ä–æ–∑–æ–≤—ã–π, —Å–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π, –Ω–µ–∂–Ω–æ-–∑–µ–ª–µ–Ω—ã–π)
   - –ù–ò–ö–ê–ö–ò–• —è—Ä–∫–∏—Ö –∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã—Ö —Å–æ—á–µ—Ç–∞–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–ø—Ä—è–≥–∞—é—Ç –≥–ª–∞–∑–∞!

3. –§–û–ù: –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ –æ–¥–Ω–æ—Ç–æ–Ω–Ω—ã–π —Å–≤–µ—Ç–ª—ã–π.

–û–ø–∏—à–∏ –¥–∏–∑–∞–π–Ω —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
1. –¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞: –æ—Å–Ω–æ–≤–Ω–æ–π #HEX (—Å–≤–µ—Ç–ª—ã–π/–º–æ–ª–æ—á–Ω—ã–π), –∞–∫—Ü–µ–Ω—Ç–Ω—ã–π #HEX (–ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ã–π, –º—è–≥–∫–∏–π)
2. –®—Ä–∏—Ñ—Ç—ã: –∑–∞–≥–æ–ª–æ–≤–æ–∫ Montserrat Light/Raleway (–∏–ª–∏ –ø–æ–¥–æ–±–Ω—ã–π –º—è–≥–∫–∏–π —à—Ä–∏—Ñ—Ç), —Ç–µ–∫—Å—Ç Open Sans/Lato
3. –§–æ–Ω: –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π, –æ–¥–Ω–æ—Ç–æ–Ω–Ω—ã–π)

–î–∞–π –æ—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —ç—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.<|eot_id|><|start_header_id|>assistant<|end_header_id|>"""
        
        print("–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–∏–∑–∞–π–Ω...")
        response = requests.post(
            OLLAMA_URL,
            json={
                "model": MODEL_NAME,
                "prompt": design_prompt,
                "stream": False,
                "options": {"temperature": 0.6}
            },
            timeout=30
        )
        
        if response.status_code == 200:
            design_suggestions = response.json().get("response", "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–∏–∑–∞–π–Ω").strip()
        else:
            print(f"–û—à–∏–±–∫–∞ API –¥–ª—è –¥–∏–∑–∞–π–Ω–∞ (–∫–æ–¥ {response.status_code})")
        
        return title_response, content_lines, design_suggestions
        
    except requests.exceptions.Timeout:
        print("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç API")
        return "–¢–∞–π–º–∞—É—Ç API", ["–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤–æ–≤—Ä–µ–º—è"], "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–∏–∑–∞–π–Ω"
    except requests.exceptions.ConnectionError:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {OLLAMA_URL}")
        return "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", ["–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É Ollama"], "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–∏–∑–∞–π–Ω"
    except Exception as e:
        print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return "–û—à–∏–±–∫–∞", ["–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"], "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–∏–∑–∞–π–Ω"

def parse_hex_color(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç HEX-–∫–æ–¥ —Ü–≤–µ—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞."""
    if not text: return None
    match = re.search(r'#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})\b', str(text))
    if match:
        hex_color = match.group(1)
        if len(hex_color) == 3:  # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç #RGB
            hex_color = "".join([c*2 for c in hex_color])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ #RRGGBB
        try:
            r = int(hex_color[0:2], 16)
            g = int(hex_color[2:4], 16)
            b = int(hex_color[4:6], 16)
            return RGBColor(r, g, b)
        except ValueError:
            print(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π HEX –∫–æ–¥: {hex_color}")
    return None

def parse_design_suggestions(suggestions_text):
    """–ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –¥–∏–∑–∞–π–Ω—É."""
    design = {
        'main_color': None, 
        'accent_color': None,
        'title_font': None, 
        'text_font': None, 
        'background_idea': None
    }
    
    # –ü–∞—Ä—Å–∏–º —Ü–≤–µ—Ç–∞
    colors = re.findall(r'#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})\b', suggestions_text)
    if len(colors) >= 1:
        main_hex = colors[0]
        if len(main_hex) == 3:
            main_hex = ''.join([c*2 for c in main_hex])
        try:
            design['main_color'] = RGBColor(
                int(main_hex[0:2], 16),
                int(main_hex[2:4], 16),
                int(main_hex[4:6], 16)
            )
        except (ValueError, IndexError):
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞: {main_hex}")
            
    if len(colors) >= 2:
        accent_hex = colors[1]
        if len(accent_hex) == 3:
            accent_hex = ''.join([c*2 for c in accent_hex])
        try:
            design['accent_color'] = RGBColor(
                int(accent_hex[0:2], 16),
                int(accent_hex[2:4], 16),
                int(accent_hex[4:6], 16)
            )
        except (ValueError, IndexError):
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∞–∫—Ü–µ–Ω—Ç–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞: {accent_hex}")
    
    # –ü–∞—Ä—Å–∏–º —à—Ä–∏—Ñ—Ç—ã - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å
    for line in suggestions_text.split('\n'):
        line = line.strip()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —à—Ä–∏—Ñ—Ç–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        if '–∑–∞–≥–æ–ª–æ–≤–æ–∫' in line.lower():
            title_match = re.search(r'–∑–∞–≥–æ–ª–æ–≤–æ–∫\s*:\s*([^,;]+)', line, re.IGNORECASE)
            if title_match:
                design['title_font'] = title_match.group(1).strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —à—Ä–∏—Ñ—Ç–µ —Ç–µ–∫—Å—Ç–∞
        if '—Ç–µ–∫—Å—Ç' in line.lower():
            text_match = re.search(r'—Ç–µ–∫—Å—Ç\s*:\s*([^,;]+)', line, re.IGNORECASE)
            if text_match:
                design['text_font'] = text_match.group(1).strip()
    
    # –ü–∞—Ä—Å–∏–º –∏–¥–µ—é —Ñ–æ–Ω–∞
    bg_match = re.search(r'—Ñ–æ–Ω\s*:\s*(.+)', suggestions_text, re.IGNORECASE)
    if bg_match:
        design['background_idea'] = bg_match.group(1).strip()
    
    # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if design['main_color'] is None: design['main_color'] = RGBColor(240, 240, 240)  # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π
    if design['accent_color'] is None: design['accent_color'] = RGBColor(0, 0, 0)  # –ß–µ—Ä–Ω—ã–π
    
    # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if design['main_color'] is None: design['main_color'] = RGBColor(240, 240, 240)  # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π
    if design['accent_color'] is None: design['accent_color'] = RGBColor(0, 0, 0)  # –ß–µ—Ä–Ω—ã–π

    # –ù–û–í–´–ô –ö–û–î: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏ –∞–∫—Ü–µ–Ω—Ç–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
    main_brightness = sum([design['main_color'][0], design['main_color'][1], design['main_color'][2]]) / 3
    if main_brightness > 180:  # –ï—Å–ª–∏ —Ñ–æ–Ω –æ—á–µ–Ω—å —Å–≤–µ—Ç–ª—ã–π
        accent_brightness = sum([design['accent_color'][0], design['accent_color'][1], design['accent_color'][2]]) / 3
        if accent_brightness > 160:  # –ï—Å–ª–∏ –∞–∫—Ü–µ–Ω—Ç–Ω—ã–π —Ü–≤–µ—Ç —Ç–æ–∂–µ —Å–≤–µ—Ç–ª—ã–π
            # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ —Ç–µ–º–Ω–æ-—Å–µ—Ä—ã–π (–º—è–≥—á–µ —á–µ–º —á–∏—Å—Ç—ã–π —á–µ—Ä–Ω—ã–π)
            design['accent_color'] = RGBColor(60, 60, 60)
            print("‚ö†Ô∏è –ê–∫—Ü–µ–Ω—Ç–Ω—ã–π —Ü–≤–µ—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Ç–µ–º–Ω—ã–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –Ω–∞ —Å–≤–µ—Ç–ª–æ–º —Ñ–æ–Ω–µ")
    print(f"‚ÑπÔ∏è –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω: {design}")
    return design

def create_slide(presentation, title, content, design_suggestions):
    """–°–æ–∑–¥–∞—ë—Ç —Å–ª–∞–π–¥ –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –±–∞–∑–æ–≤—ã–π –¥–∏–∑–∞–π–Ω."""
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–ª–∞–π–¥
        slide_layout = presentation.slide_layouts[1]  # –ú–∞–∫–µ—Ç "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç"
        slide = presentation.slides.add_slide(slide_layout)
    except IndexError:
        try:
            slide_layout = presentation.slide_layouts[0]  # –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–≤—ã–π –º–∞–∫–µ—Ç
            slide = presentation.slides.add_slide(slide_layout)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–ª–∞–π–¥: {e}")
            return

    # –ü–∞—Ä—Å–∏–º –¥–∏–∑–∞–π–Ω
    design = parse_design_suggestions(design_suggestions)
    main_color = design['main_color']
    accent_color = design['accent_color']
    title_font = design['title_font']
    text_font = design['text_font']

    # 1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω
    try:
        fill = slide.background.fill
        fill.solid()
        fill.fore_color.rgb = main_color
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: RGBColor —ç—Ç–æ –∫–æ—Ä—Ç–µ–∂ (r,g,b), –∞ –Ω–µ –æ–±—ä–µ–∫—Ç —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º .rgb
        print(f"üé® –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ü–≤–µ—Ç —Ñ–æ–Ω–∞: #{main_color[0]:02x}{main_color[1]:02x}{main_color[2]:02x}")
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ–Ω: {e}")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–π —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —è—Ä–∫–æ—Å—Ç–∏ —Ñ–æ–Ω–∞
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º —Ü–≤–µ—Ç–∞
    brightness = sum([main_color[0], main_color[1], main_color[2]]) / 3
    text_color = RGBColor(0, 0, 0) if brightness > 128 else RGBColor(255, 255, 255)
    print(f"‚ÑπÔ∏è –Ø—Ä–∫–æ—Å—Ç—å —Ñ–æ–Ω–∞: {brightness:.0f}, –≤—ã–±—Ä–∞–Ω —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞: #{text_color[0]:02x}{text_color[1]:02x}{text_color[2]:02x}")

    # 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    try:
        title_shape = slide.shapes.title
        if title_shape and hasattr(title_shape, 'text_frame'):
            # –û—á–∏—â–∞–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç
            tf = title_shape.text_frame
            tf.clear()
            p = tf.add_paragraph()
            run = p.add_run()
            run.text = title[:50]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å
            run.font.color.rgb = accent_color
            if title_font: run.font.name = title_font
            
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º —Ü–≤–µ—Ç–∞
            print(f"üé® –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫: –¶–≤–µ—Ç #{accent_color[0]:02x}{accent_color[1]:02x}{accent_color[2]:02x}, –®—Ä–∏—Ñ—Ç {title_font or 'default'}")
        else:
            print("–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à–µ–π–ø –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞: {e}")

    # 3. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    try:
        content_box = None
        # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        for shape in slide.placeholders:
            if hasattr(shape, 'placeholder_format') and shape.placeholder_format.type != 1:  # –ù–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫
                content_box = shape
                break
        
        if content_box and hasattr(content_box, 'text_frame'):
            tf = content_box.text_frame
            tf.clear()
            
            for i, line in enumerate(content[:3]):  # –ú–∞–∫—Å. 3 –ø—É–Ω–∫—Ç–∞
                p = tf.add_paragraph()
                run = p.add_run()
                # –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞
                run.text = line[:100]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                run.font.color.rgb = text_color
                if text_font: run.font.name = text_font
            
            print(f"üé® –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω –∫–æ–Ω—Ç–µ–Ω—Ç: –¶–≤–µ—Ç #{text_color[0]:02x}{text_color[1]:02x}{text_color[2]:02x}, –®—Ä–∏—Ñ—Ç {text_font or 'default'}")
        else:
            print("–ù–µ –Ω–∞–π–¥–µ–Ω –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")


def refresh_powerpoint():
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç, –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–ª–∞–π–¥—É."""
    script = f'''
    set pptFile to POSIX file "{os.path.abspath(PPTX_FILE)}"
    set pptFileName to "{os.path.basename(PPTX_FILE)}"

    tell application "Microsoft PowerPoint"
        activate
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –µ—Å–ª–∏ –µ—Å—Ç—å
        try
            if (count of presentations) > 0 then
                if name of active presentation is pptFileName then
                    close active presentation saving yes
                    delay 1
                end if
            end if
        end try
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
        try
            open pptFile
            delay 2
            
            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–ª–∞–π–¥—É
            tell application "System Events"
                tell process "Microsoft PowerPoint"
                    # Cmd+Option+Down = –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–ª–∞–π–¥—É –≤ PowerPoint
                    key code 125 using {{command down, option down}}
                end tell
            end tell
        end try
    end tell
    '''
    
    try:
        subprocess.run(["osascript", "-e", script], check=True)
    except subprocess.CalledProcessError as e:
        print(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è AppleScript: {e}")
    except Exception as e:
        print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ PowerPoint: {e}")

def main():
    # –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é
    try:
        if os.path.exists(PPTX_FILE):
            prs = Presentation(PPTX_FILE)
            print(f"üü¢ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è: {PPTX_FILE}")
        else:
            prs = Presentation()
            print("üü¢ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è")
            prs.save(PPTX_FILE)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏/—Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏: {e}")
        return

    try:
        while True:
            text = recognize_speech().strip()
            if not text:
                continue
                
            if "—Å—Ç–æ–ø" in text.lower():
                print("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ '—Å—Ç–æ–ø'. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
                break

            print("\n‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–ª–∞–π–¥–∞...")
            title, content, design_suggestions = generate_slide_data(text)
            
            print(f"\nüìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}")
            print("üìå –ö–æ–Ω—Ç–µ–Ω—Ç:")
            for item in content:
                print(f"   ‚Ä¢ {item}")
            print("\nüé® –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –¥–∏–∑–∞–π–Ω—É (–æ—Ç Ollama):")
            print(design_suggestions)

            print("\nüõ†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Å–ª–∞–π–¥–∞...")
            create_slide(prs, title, content, design_suggestions)

            print("\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞...")
            try:
                prs.save(PPTX_FILE)
                print("   –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
                print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ PowerPoint...")
                refresh_powerpoint()
                print("‚úÖ –°–ª–∞–π–¥ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –æ–±–Ω–æ–≤–ª–µ–Ω!")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
                time.sleep(2)
                try:
                    # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                    prs.save(PPTX_FILE)
                    refresh_powerpoint()
                    print("‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
                except Exception as e2:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e2}")
                    
    except KeyboardInterrupt:
        print("\n–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    finally:
        try:
            prs.save(PPTX_FILE)
            print(f"\nüíæ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –∫–∞–∫: {PPTX_FILE}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Ollama
    try:
        response = requests.get(OLLAMA_URL.replace("/api/generate", "/"), timeout=5)
        print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ Ollama: {OLLAMA_URL.replace('/api/generate', '/')}...")
        if response.status_code == 200:
            print("üü¢ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Ollama –û–ö.")
            main()
        else:
            print(f"üü† Ollama –æ—Ç–≤–µ—Ç–∏–ª–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {response.status_code}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ä–≤–µ—Ä.")
    except requests.exceptions.ConnectionError:
        print("‚ÄºÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Ollama. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Ollama: {e}")
